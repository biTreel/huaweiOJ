#include <iostream>#include <cmath>using namespace std;#define uint unsigned intint getMaxArr(uint m,uint n,uint *pArrNum,uint *pArr);uint sushu(uint* arr,uint len,uint *resArr);int main(){    uint m,n;    cin>>m>>n;    uint Num=0;    uint *ariArr=new uint[n-m+1];    getMaxArr(m,n,&Num,ariArr);    delete  []ariArr;    return 0;}int getMaxArr(uint m,uint n,uint* pArrNum,uint* pArr){    if(m<0 || n<=m || 30<n)        return -1;    uint *sArr=new uint [n-m+1];    for(uint i=0;i!=n-m+1;++i)        sArr[i]=i+m;    //uint *resArr=new [n-m+1];    *pArrNum=sushu(sArr,n-m+1,pArr);    //cout<<*pArrNum<<endl;    for(uint i=0;i!=*pArrNum;++i)        cout<<*(pArr+i)<<" ";    cout<<endl;        delete [] sArr;    return 0;}uint sushu(uint* arr,uint len,uint *resArr){    //uint* resArr;    uint k=0;    for(uint i=0;i!=len;++i){        bool flag=true;        if(arr[i]<2)            continue;        if(arr[i]==2){            resArr[k++]=2;            continue;        }        for(uint j=2;j <arr[i];++j){            if(0==arr[i]%j){                 flag=false;                break;            }        }        if(flag==true){            resArr[k++]=arr[i];            //cout<<resArr[k-1];        }    }    return k;}vector<uint> AP(uint *sArr,uint len){    vector<uint> APvec;    if(len<=2){        uint i=0;        while(i!=len)            APvec.push_back(sArr[i]);    }    for(int j=len-2;j!=0;--j){        int i=j-1,k=j+1;        while(i>=0 && k<=len-1){            if(sArr[i]+sArr[k] < 2*sArr[j])                ++k;            else if (sArr[i]+sArr[k] > 2*sArr[j])                --i;            else{
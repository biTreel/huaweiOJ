/* * Author: biTree * Date: June,11,2016 */#include <iostream>#include <cstring>using namespace std;//#define uint unsigned int#define MAX 1000int middle(char arr[],int curr,int len);int mirror(char arr[],int curr,int len);void GetCipherMaxLen(char acCipherContent[],int* piCipherLen);int main(){    char *arr=new char[MAX];    int i=0;    while(cin>>arr[i] && i!=MAX)        i++;    int len=strlen(arr);    GetCipherMaxLen(arr,&len);    delete arr;    return 0;}int middle(char arr[],int curr,int len){    int relen=1;    int i=1;    while(arr[curr-i]==arr[curr+i] && curr-i>=0 && curr+i<len){        relen+=2;        i++;    }    return relen;}int mirror(char arr[],int curr,int len){    int relen=0;    int i=0;    while(arr[curr-i]==arr[curr+i+1] && curr-i>=0 && curr+i+1<len){        relen+=2;        i++;    }    return relen;}void GetCipherMaxLen(char acCipherContent[],int* piCipherLen){    if(0==*piCipherLen)        return;    int len=0;    int l1,l2,max;    for(int i=1;i!=*piCipherLen;++i){        l1=middle(acCipherContent,i,*piCipherLen);        l2=mirror(acCipherContent,i,*piCipherLen);        max=l1 > l2 ? l1 : l2;        if(len<max)            len=max;    }    cout<<len<<endl;}